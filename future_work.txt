The point of this document is to highlight the downfalls of the system as it stands when we are done finished with the project. As well as highlight the improvements that can be added in the future.

1.)Train a new model with a better dataset. Our was collected by hand, and being fairly small for training a model with such a complex task. Obtain a scientifically tested source that is purpose built for a task like this. Because some signals like bluetooth and wifi2.4GHz operate at such close intervals to one another that it is effectively impossible to distinguish to anyone but a seasoned RF Expert. And since the dataset is so small there is likely problems with overfitting in the model. Overfitting is where the model gets too comfortable with looking at the data it is training off of and thus has extremely tight tolerances to what it will eventually accept in its real word application. This can be avoided by training for less epochs, training with a larger dataset, as well as inegrating a dropout mechanic, and lastly a val_loss monitor(shows how the model is progressing in terms of accuracy) that monitors when the model has effectively reached its maximum accuracy before it starts overfitting. 

2.) Tensorflow CNN and GNURadio sweep work sequentially not in tendem. Meaning the sweep happens and then the model classification executes, this somewhat slows down the execution time. Even though it is fairly fast at around 30 seconds gui start to display of data. The sdr imports data at a fairly high rate, and with that it does not take up alot of cpu usage or ram usage for that matter. Along with the gpu being the main source of computation for the loaded CNN model, running them in tandem makes sense. 

3.) date-time recorded to the .dat file, as well as date-time recorded to the predictions.csv file(date-time in the title). This would give better long term results and automatically code in an organization system for the data and results. possibly also add lat-long

4.) better date-time acquisition would be preferable to the current of pulling an IP address off of the computer. This would not work in an area without any signal or wifi connection, as well as it not being very accurate. When running it in indianapolis, it always points my lat-long to be in monument circle. There are usb sticks that can be plugged into computers to give exact lat-long

5.) Export frequency and power characteristics out of GNURadio, save them and after model classifies a signal the correlating power. Save the corresponding power, frequency, and signal class into a seperate .csv file that does not keep track of signal but instead simply tracks all of the signals in the environment. Listing them from highest power to lowest power present. 

6.) with our final product the pause button is effectively useless, unless we incorporate the tandem execution of the model and sweep it does not serve much of a purpose. I would recommend repurposing it into a resweep button that will re-execute the sweep and classification model. possibly taking new date-time, lat-long, etc. 

7.) cutting out the gnuradio gui and making the entire operation a 1 click execution. This was a goal we meant to make but time fell short on us.